@page "/search/{searchterm}"
@inject NavigationManager NavManager
@inject IMediator Mediator

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Search results for "@SearchTerm"</h3>
<TrailSearch />
<SearchFilter SearchTerm="@SearchTerm" MaxLength="@MaxLength" MaxTime="@MaxTime" />

@if (searchResults == null)
{
    <p>Loading search results...</p>
}
else
{
    <TrailDetails Trail="selectedTrail" />
    <div class="grid">
        @foreach (var trail in searchResults)
        {
            <TrailCard Trail="trail" OnSelected="HandleTrailSelected" />
        }
    </div>
}

@code {
    private IEnumerable<Trail>? searchResults;
    private IEnumerable<Trail> cachedSearchResults = Array.Empty<Trail>();
    private Trail? selectedTrail;

    [Parameter]
    public string SearchTerm { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public int? MaxTime { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public int? MaxLength { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Mediator.Send(new GetTrailsRequest());
            var allTrails = response.Trails.Select(x => new Trail
                {
                    Id = x.Id,
                    Name = x.Name,
                    Image = x.Image,
                    Description = x.Description,
                    Location = x.Location,
                    Length = x.Length,
                    TimeInMinutes = x.TimeInMinutes,
                    Owner = x.Owner,
                });

            searchResults = allTrails.Where(x => x.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase)
                || x.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));

            cachedSearchResults = searchResults;

            UpdateFilters();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading trail data: {ex.Message}");
        }
    }

    protected override void OnParametersSet()
    {
        UpdateFilters();
    }

    private void HandleTrailSelected(Trail trail) => selectedTrail = trail;

    private void UpdateFilters()
    {
        var filters = new List<Func<Trail, bool>>();
        if (MaxLength is not null && MaxLength > 0)
        {
            filters.Add(x => x.Length <= MaxLength);
        }
        if (MaxTime is not null && MaxTime > 0)
        {
            filters.Add(x => x.TimeInMinutes <= MaxTime * 60);
        }
        if (filters.Any())
        {
            searchResults = cachedSearchResults.Where(trail => filters.All(filter => filter(trail)));
        }
        else
        {
            searchResults = cachedSearchResults;
        }
    }
}